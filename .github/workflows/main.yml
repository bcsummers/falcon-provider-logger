name: build

on:
  push:
    branches: [develop, master]
  pull_request:
    branches: [develop, master]
  workflow_dispatch:

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      # Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[develop]

      # Lint project using pre-commit config
      - name: Lint with pre-commit
        run: |
          echo ::set-env name=PRE_COMMIT_HOME::$GITHUB_WORKSPACE/.cache/pre-commit-${{ matrix.python-version }}
          pre-commit clean
          pre-commit --version
          pre-commit install
          echo "PRE_COMMIT_HOME <${PRE_COMMIT_HOME}>"
          pre-commit run --all-files

      # Cache pre-commit
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ matrix.python-version }}|${{ hashFiles('.pre-commit-config.yaml') }}

      # Get pip directory
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      # Cache pip directory
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-:

  test:
    needs: pre-flight
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      # Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[develop]

      # Test package and save artifacts
      - name: Test with pytest
        run: >
          pytest
          --cov=falcon_provider_storage
          --cov-report=html:artifacts/cov-report-${{ matrix.python-version }}
          --cov-report=term
          --html=artifacts/test-report-${{ matrix.python-version }}.html
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml
          --self-contained-html
          tests/

      # Artifact upload
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}

      # Get pip directory
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      # Cache pip directory
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-:
  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.8]
  #
  #   steps:
  #     - uses: actions/checkout@v2
  #
  #     # Setup Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #
  #     # Install dependencies
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install setuptools wheel twine
  #
  #     # Push to pypi
  #     - name: Build and publish
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         python setup.py sdist bdist_wheel
  #         twine upload --repository testpypi dist/*
  #
  #     # Get pip directory
  #     - name: Get pip cache dir
  #       id: pip-cache
  #       run: |
  #         echo "::set-output name=dir::$(pip cache dir)"
  #
  #     # Cache pip directory
  #     - name: pip cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.pip-cache.outputs.dir }}
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-:
